
# Define dedicated volumes for each service to maintain separation and data persistence
volumes:
  ollama_storage:    # Volume for Ollama service
  open_webui_data:   # Volume for Open WebUI service
  searxng_data:      # Volume for SearxNG service
  bolt_new_data:     # Volume for Bolt New service
  n8n_storage:       # Volume for n8n workflows and credentials
  postgres_storage:  # Volume for PostgreSQL data
  qdrant_storage:    # Volume for Qdrant vector storage
  flowise_data:      # Volume for Flowise configuration and data

# Single shared network to enable communication between services
networks:
  demo:

services:
  # Ollama Service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 11434:11434
    volumes:
      - ollama_storage:/root/.ollama

  # Open WebUI Service
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "3000:8080"
    volumes:
      - open_webui_data:/app/backend/data

  # SearxNG Service
  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - ./searxng:/etc/searxng
      - ./searxng/limiter.toml:/etc/searxng/limiter.toml:ro

  # Bolt New Service (Custom Fork)
  app-dev:
    build: 
      context: .
      target: bolt-ai-development
    container_name: bolt.new
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    networks:
      - demo

  # n8n Service
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  # Qdrant Service
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage

  # Flowise Service
  flowise:
    image: flowiseai/flowise
    container_name: flowise
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - flowise_data:/root/.flowise
    entrypoint: /bin/sh
    command: -c "sleep 3 && flowise start"
